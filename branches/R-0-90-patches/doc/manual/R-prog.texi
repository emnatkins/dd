\input texinfo
@c %**start of header
@setfilename R-prog.info
@settitle R Programming Manual
@set VERSION 0.0-0
@setchapternewpage on
@c %**end of header

@syncodeindex fn vr

@dircategory Programming
@direntry
* R Programming: (R-prog).      The R Programming Manual.
@end direntry

@finalout

@macro R {}
@sc{r}
@end macro

@macro HTML {}
@sc{html}
@end macro

@titlepage
@title R Programming Manual
@subtitle Version @value{VERSION}
@author R Development Core Team
@end titlepage

@contents

@node Top, Introduction, (dir), (dir)

@menu
* Introduction::                
* R (internal) programming miscellania::  
* Creating R packages::         
* Writing R documentation::     
* Function and variable index::  
@end menu

@node Introduction, R (internal) programming miscellania, Top, Top
@chapter Introduction

@menu
* Legalese::                    
* Operating system access::     
* .C/.Fortran::                 
* dyn.load/dyn.unload::         
* .Call/.External::             
@end menu

@node Legalese, Operating system access, Introduction, Introduction
@section Legalese

This document is @copyright{} 1999 by the R Core Team.

This document is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This document is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

A copy of the GNU General Public License is available via WWW at

@display
@uref{http://www.gnu.org/copyleft/gpl.html}.
@end display

@noindent
You can also obtain it by writing to the Free Software Foundation, Inc.,
675 Mass Ave, Cambridge, MA 02139, USA.

@chapter     System and foreign language interfaces


@menu
* Operating system access::
* .C/.Fortran::
* dyn.load/dyn.unload::
* .Internal::
* .Call/.External::
* .Primitive::
@end menu

@node  Operating system access, .C/.Fortran, Legalese, Introduction
@section  Operating system access

Access to operating system functions is via the @R{} function
@code{system}. The details will differ by platform (see the on-line
help), and about all that can safely be assumed is that the first argument
will be a string @code{command} that will be passed for execution
(not necessarily by a shell) and the second argument will be
@code{internal} which if true will collect the output of the command
into an @R{} character vector.

The function @code{unix.time} is available for timing (even on non-Unix
platforms, although the information available may be limited there).


@node .C/.Fortran, dyn.load/dyn.unload, Operating system access, Introduction
@section         .C/.Fortran

These two functions provide a standard interface to compiled code that
has been linked into @R{}, either at build time or via @code{dyn.load}
(q.v.).  They are primarily intended for compiled C and Fortran code
respectively, but the @code{.C} function can be used with other
languages which can generate C interfaces, for example C++.

The first argument to each function is a character string given the
symbol name as known to C or Fortran, that is the function or subroutine
name. (The mapping to the symbol name in the load table is given by the
functions @code{symbol.C} and @code{symbol.For}; that the symbol is
loaded can be tested by, for example,
@code{is.loaded(symbol.C("loglin"))}.)

There can be up to 65 further arguments giving @R{} objects to be passed
to compiled code. Normally these are copied before being passed in, and
copied again to an @R{} list object when the compiled code returns.
If the arguments are given names, these are used as names for the
components in the returned list object.

The following table gives the mapping between the modes of @R{} vectors
and the types of arguments to a C function or Fortran subroutine.

@multitable {storage.mode} {RRR storage.mode} {RRR storage.mode} {DOUBLE PRECISION}
@item	@tab @R{} storage mode @tab  C type  @tab   Fortran type
@item	@tab @code{logical}   @tab @code{int *}     @tab @code{INTEGER}
@item	@tab @code{integer}   @tab @code{int *}     @tab @code{INTEGER}
@item	@tab @code{double}    @tab @code{double *}  @tab @code{DOUBLE PRECISION}
@item	@tab @code{complex}   @tab @code{Rcomplex *} @tab @code{DOUBLE COMPLEX}
@item	@tab @code{character} @tab @code{char **}   @tab @code{CHARACTER*255}
@end multitable
C type @code{Rcomplex} is a structure with @code{double} members
@code{r} and @code{i} defined in the header file @code{Complex.h}.  Only
a single character string can be passed to or from Fortran, and the
success of this is compiler-dependent.  Other @R{} objects can be passed
to @code{.C}, but it is better to use one of the other interfaces. An
exception is passing an @R{} function for use with @code{call_R}, when
the object can be handled as @code{void *} en route to @code{call_R}.

It is possible to pass numeric vectors of storage mode @code{double} to
C as @code{float *} or Fortran as @code{REAL} by setting the attribute
@code{Csingle}, most conveniently by using the @R{} functions
@code{as.single}, @code{single} or @code{storage.mode}.  This is
intended only to be used to aid interfacing to existing C or Fortran
code.

Unless formal argument @code{NAOK} is true, all the other arguments are
checked for missing values @code{NA} and for the IEEE special values
@code{NaN}, @code{Inf} and @code{-Inf}, and the presence of any of these
generates an error. If it is true, these values are passed unchecked.

Argument @code{DUP} can be used to suppress copying. It is dangerous:
see the on-line help for arguments against its use.

Finally, argument @code{PACKAGE} confines the search for the symbol name
to a specific shared library (or use @code{"base"} for code compiled
into @R). Its use is highly desirable, as there is no way to avoid two
package writers using the same symbol name, and such name clashes are
normally sufficient to cause @R{} to crash.

Note that the compiled code should not return anything except through
its arguments: C functions should be of type @code{void} and Fortran
subprograms should be subroutines.


@node dyn.load/dyn.unload, .Call/.External, .C/.Fortran, Introduction
@section         dyn.load/dyn.unload

Compiled code to be used with @R{} is loaded as a shared library (Unix)
or DLL (Windows). The library / DLL is loaded by @code{dyn.load} and
unloaded by @code{dyn.unload}. Unloading is not normally necessary, but
it is needed to allow the DLL to be re-built on some platforms, including
Windows.

The first argument to both functions is a character string giving the
path to library. Programmers should not assume a specific file extension for
the library (such as @code{.so}) but use a construction like
@example
file.path(path1, path2, paste("mylib", .Platform$dynlib.ext, sep=""))
@end example
@noindent for platform independence. On some Unix systems the path
supplied to @code{dyn.load} should contain a @code{/} as the standard
search path for shared libraries does not contain the current directory.

Loading is most often done via a call to @code{library.dynam} in the
@code{.First.lib} function of a package.

Under some Unix systems there is a choice of how the symbols are
resolved when the library is loaded, governed by the arguments
@code{local} and @code{now}. Only use these if really necessary: in
particular using @code{now=FALSE} and then calling an unresolved symbol
will terminate @R{} unceremoniously.

If a library / DLL is loaded more than once the most recent version is
used.  More generally, if the same symbol name appears in several
libraries, the most recently loaded occurrence is used.


@node .Call/.External,  , dyn.load/dyn.unload, Introduction
@section         .Call/.External

These two interfaces have almost the same functionality. @code{.Call} is
based on the interface of the same name in S version 4, and
@code{.External} is based on @code{.Internal}.  @code{.External} is more
complex but allows a variable number of arguments.

A call to @code{.Call} is very similar to @code{.C}, for example
@example
.Call("convolve", a, b)
@end example
@noindent
The first argument should be a character string giving a C symbol name
of code that has already been loaded into @R{}.  Up to 65 @R{} objects
can passed as arguments.  The C side of the interface is
@example
#include <S.h>

SEXP convolveE(SEXP a, SEXP b)
 ...
@end example


A call to @code{.External} is almost identical
@example
.External("convolveE", a, b)
@end example
@noindent
but the C side of the interface is different, having only one argument
@example
#include <Rinternals.h>

SEXP convolveE(SEXP args)
 ...
@end example
@noindent
Here @code{args} is a @code{LISTSXP}, a Lisp-style list from which the
arguments can be extracted.

In each case the @R{} objects are available for manipulation via a set
of functions and macros defined in the header file @file{Rinternals.h}
or some higher-level macros defined in @file{Rdefines.h} (included by
@code{S.h}). Details are give in the R-external manual.
@c [FIXME: How do we refer to this?]



@section Interfacing C++ code

(Contributed by @emph{Adrian Trapletti}.)

Suppose we have the following hypothetical C++ library, consisting of
the two files @file{X.hh} and @file{X.cc}, which we want to use in R:

@smallexample
@cartouche
// X.hh

class X
@{
public:
  X ();
  ~X ();
@};

class Y
@{
public:
  Y ();
  ~Y ();
@};
@end cartouche
@end smallexample

@smallexample
@cartouche
// X.cc

#include <iostream.h>
#include "X.hh"

static Y y;

X::X()  @{ cout << "constructor X" << endl; @}
X::~X() @{ cout << "destructor X" << endl; @}
Y::Y()  @{ cout << "constructor Y" << endl; @}
Y::~Y() @{ cout << "destructor Y" << endl; @}
@end cartouche
@end smallexample

@noindent implementing the 2 classes @code{X} and @code{Y}.  The only
thing we have to do is writing a wrapper function and ensuring that the
function is enclosed in

@smallexample
extern "C" @{

@}
@end smallexample

For example,

@smallexample
@cartouche
// X_main.cc:

#include "X.hh"

extern "C" @{

void X_main ()
@{
  X x;
@}

@}
@end cartouche
@end smallexample

Compiling and linking should be done with the C++ compiler-linker. For
example, under Linux we might use

@smallexample
g++ -c X.cc
g++ -c X_main.cc
g++ -shared -o X.so X_main.o X.o
@end smallexample

Otherwise (i.e., linking, e.g., with GNU ld) the C++ initialization code
(and hence the constructor of the static variable @code{Y}) are not
called.

Now starting R yields

@smallexample
R: Copyright 1999, The R Development Core Team
Version 0.63.2  (January 12, 1999)
...
Type    "q()" to quit R.

R> dyn.load("X.so")
constructor Y
R> .C("X_main")
constructor X
destructor X
R> q()
Save workspace image? [y/n/c]: y
destructor Y
@end smallexample

@node R (internal) programming miscellania, Creating R packages, Introduction, Top
@chapter R (internal) programming miscellania

@menu
* Which R functions should stay @sc{<primitive>}?::  
@end menu

@node Which R functions should stay @sc{<primitive>}?,  , R (internal) programming miscellania, R (internal) programming miscellania
@section Which R functions should stay @sc{<primitive>}?

In general, all functions should be written using @code{.Internal()}.
However, there are exceptions which are fully specified as follows:

@enumerate

@item
``Special functions'' which really are @emph{language} elements, however
exist as @sc{<primitive>} s in @R{}:

@example
@{       (         if       for  while  repeat  break  next
return  function  on.exit
@end example

@item
Basic @emph{operator}s (i.e., functions usually @emph{not} called as
@code{foo(a, b, ...)}) for subsetting, assignment, arithmetic and logic.
These are the following 1-, 2-, and @emph{N}-argument functions:

@example
          [    [[    $
<-   <<-  [<-  [[<-  $<-
---------------------------------------
+    -    *    /     ^    %%   %*%  %/%
<    <=   ==   !=    >=   >    \\
|    ||   &    &&    !
@end example

@item
``Low level'' 0- and 1-argument functions shall remain @sc{<primitive>},
iff they belong to one of the following groups of functions:

@enumerate a
@item
Basic mathematical functions with a single argument, i.e.,

@example
sign    abs
floor   ceiling
----------------------
sqrt    exp
cos     sin      tan
acos    asin     atan
cosh    sinh     tanh
acosh   asinh    atanh
----------------------
cumsum  cumprod
cummax  cummin
----------------------
Im      Re
Arg     Conj     Mod
@end example

@noindent Note that @code{log} has @emph{two} arguments, and we will
use

@example
log <- function(x, base = exp(1)) @{
  if(missing(base))
    .Internal(log(x))
  else
    .Internal(log(x, base))
@}
@end example

@noindent in order to ensure that @code{log(x = pi, base = 2)} is
identical to @code{log(base = 2, x = pi)}.

@item
Functions rarely used outside of ``programming'' (i.e., mostly used
inside other functions), such as

@example
nargs        missing
interactive  is.@emph{xxx}
.Primitive   .Internal   .External
symbol.C     symbol.For
globalenv    pos.to.env  unclass
@end example

@noindent
(where @emph{xxx} stands for almost 30 different notions, such as
@code{function}, @code{vector}, @code{numeric}, and so forth).

@item
The programming and session management utilities

@example
debug    undebug    trace  untrace
browser  proc.time
@end example

@end enumerate

@item
The following basic assignment and extractor functions

@example
.Alias      environment<-
length      length<-
class       class<-
attr        attr<-
attributes  attributes<-
dim         dim<-
dimnames    dimnames<-
@end example

@item
A few other @emph{N}-argument functions shall also remain
@sc{<primitive>}, for efficiency reasons.  Care is taken in order to
treat named arguments properly:

@example
:          ~          c           list        unlist
call       as.call    expression  substitute
UseMethod  invisible 
.C         .Fortran   .Call
@end example

@end enumerate

@node Creating R packages, Writing R documentation, R (internal) programming miscellania, Top
@chapter Creating R packages


Packages provide a mechanism for loading optional code and attached
documentation as needed.  The @R{} distribution provides several
packages, such as @strong{eda}, @strong{mva}, and @strong{stepfun}.

A package consists of a subdirectory containing the files
@file{DESCRIPTION}, @file{INDEX}, and @file{TITLE}, and the
subdirectories @file{R}, @file{data}, @file{exec}, @file{inst},
@file{man}, and @file{src} (some of which can be missing).

@c FIXME Add something about configure and cleanup.

The @file{DESCRIPTION} file contains basic information about the package
in the following format:

@smallexample
Package: e1071
Version: 0.7-3
Author: Compiled by Fritz Leisch <Friedrich.Leisch@@ci.tuwien.ac.at>.
Description: Miscellaneous functions used at the Department of
        Statistics at TU Wien (E1071). 
Depends:
License: GPL version 2 or later
@end smallexample

@noindent
Continuation lines (e.g., for descriptions longer than one line) start
with a whitespace character.  The license field should contain an
explicit statement or a well-known abbreviation (such as @samp{GPL},
@samp{LGPL}, @samp{BSD}, or @samp{Artistic}), perhaps followed by a
reference to the actual license file.  It is very important that you
include this information!  Otherwise, it may not even be legally correct
for others to distribute copies of the package.

The @file{TITLE} file contains a line giving the name of the package and
a brief description.  @file{INDEX} contains a line for each sufficiently
interesting object in the package, giving its name and a description
(functions such as print methods not usually called explicitly might not
be included).  Note that you can automatically create this file using
something like @code{R CMD Rdindex man/*.Rd > INDEX}, provided that Perl
is available on your system.

The @file{R} subdirectory contains @R{} code files.  The code files to
be installed must start with a (lower- or uppercase) letter and have one
of the extensions @file{.R}, @file{.S}, @file{.q}, @file{.r}, or
@file{.s}.  We recommend using @file{.R}, as this extension seems to be
not used by any other software.  It should be possible to read in the
files using @code{source()}, so R objects must be created by
assignments.  Note that there has to be no connection between the name
of the file and the R objects created by it.  If necessary, one of these
files (historically @file{zzz.R}) should use @code{library.dynam()}
@emph{inside} @code{.First.lib()} to load compiled code.

The @file{man} subdirectory should contain @R{} documentation files for
the objects in the package.  The documentation files to be installed
must also start with a (lower- or uppercase) letter and have the
extension @file{.Rd} (the default) or @file{.rd}.

The @file{R} and @file{man} subdirectories may contain OS-specific
subdirectories named @code{unix}, @code{windows} or @code{mac}.

The C or FORTRAN source and optionally a @file{Makefile} for the compiled
code is in @file{src}.  Note that the @file{Makefile} most likely is not
needed.

The @file{data} subdirectory is for additional data files the package
makes available for loading using @code{data()}.  Currently, data files
can have one of three types as indicated by their extension: plain R
code (@file{.R} or @file{.r}), tables (@file{.tab}, @file{.txt}, or
@file{.csv}), or @code{save()} images (@file{.RData} or @file{.rda}).
The subdirectory should contain a @file{00Index} file that describes the
datasets available.

The contents of the @file{inst} subdirectory will be copied recursively
to the installation directory.

Finally, @file{exec} could contain additional executables the package
needs, typically Shell or Perl scripts.  This mechanism is currently not
used by any Unix package, and still experimental.

@menu
* Package bundles::             
@end menu

@node  Package bundles,  , Creating R packages, Creating R packages
@section Package bundles

Sometimes it is convenient to distribute several packages as a
@emph{bundle}. (The main current example is @code{VR} which contains
four packages.)  The installation scripts on both Unix and Windows can
handle package bundles as from @R{} 0.90.1.

The @file{DESCRIPTION} file of a bundle has an extra @code{Bundle:}
field, as in

@smallexample
Bundle: VR
Contains: MASS class nnet spatial
Version: 6.1-6 (1999/11/26)
Author: S original by Venables & Ripley.
  R port by Brian Ripley <ripley@@stats.ox.ac.uk>, following earlier
  work by Kurt Hornik and Albrecht Gebhardt.
BundleDescription: Various functions from the libraries of Venables and
  Ripley, `Modern Applied Statistics with S-PLUS' (3rd edition).
License: GPL (version 2 or later)
@end smallexample

The @code{Contains:} field lists the packages, which should be contained
in separate subdirectories with the names given. These are standard
packages in all respects except that the @file{DESCRIPTION} file is
replaced by a @file{DESCRIPTION.in} file which just contains fields
additional to the @file{DESCRIPTION} file of the bundle, for example

@smallexample
Package: spatial
Description: Functions for kriging and point pattern analysis.
@end smallexample



@node Writing R documentation, Function and variable index, Creating R packages, Top
@chapter Writing R documentation

@menu
* The documentation source tree::  
* Documentation format::        
* Sectioning::                  
* Marking text::                
* Mathematics::                 
* Miscellaneous::               
* Platform-specific sections::  
@end menu

@node The documentation source tree, Documentation format, Writing R documentation, Writing R documentation
@section The documentation source tree

The help files containing detailed documentation for (potentially) all
@R{} objects are in the @file{src/library/*/man} subdirectories of the
@R{} source tree, where @samp{*} stands for @strong{base} where all the
standard objects are, and for ``standard'' packages such as @strong{eda}
and @strong{mva}.  The @file{doc/manual} subdirectory contains code for
running the translated help files through La@TeX{} and further documents
pertaining to @R{}.

@node Documentation format, Sectioning, The documentation source tree, Writing R documentation
@section Documentation format

The help files are written in a form and syntax---closely resembling
@TeX{} and La@TeX{}---which can be processed into a variety of formats,
including La@TeX{}, [TN]roff, and @HTML{}.  The translation is carried
out by the @sc{Perl} script @file{Rdconv} in @file{$RHOME/bin}.

For a given @R{} function @code{myfun}, use the @R{} command
@code{prompt(myfun)} to produce the file @file{myfun.Rd}, a ``raw''
documentation file that can now be filled in with information.  The
basic layout of such a file is as follows.

@table @code
@item \name@{myfun@}
@findex \name
@var{myfun} is the basename of the file.

@item \alias@{myfun@}
@itemx \alias@{@var{more_aliases_1}@}
@itemx \alias@{@var{more_aliases_2}@}
@findex \alias
etc.  Need one @code{\alias@{@}} for each topic explained in the help
file.
@quotation
@strong{Note:} Each file should contain at least the
@code{\alias@{@var{name}@}} line.
@end quotation


@item \title@{@var{Title}@}
@findex \title

@item \description@{@dots{}@}
@findex \description
A short description of what the function(s) do(es) (one paragraph, a few
lines only).

@item \usage@{myfun(@var{arg1}, @var{arg2}, @dots{})@}
@findex \usage
One or more lines showing the synopsis of the function(s) and variables
documented in the file.  These are set verbatim in typewriter font.

@item \arguments@{@dots{}@}
@findex \arguments
Description of the function's arguments, in the following form:

@display
@var{Some optional text @emph{before} the optional list.} 
@code{\item@{@var{arg1}@}@{@var{Description of arg1.}@}}
@code{\item@{@var{arg2}@}@{@var{Description of arg2.}@}}
@r{  etc.} 
@var{Some optional text @emph{after} the list.}
@end display


@item \details@{@dots{}@}
@findex \details
A detailed if possible precise description of the functionality
provided.  Sometimes, precise @code{\references@{@}} can be given
instead.

@item \value@{@dots{}@}
@findex \value
Description of the function's return value.  If a list with multiple
values is returned, you can use

@display
@code{\item@{comp1@}@{@var{Description of result component `comp1'}@}}
@code{\item@{comp2@}@{@var{Description of result component `comp2'}@}}
@end display
etc.

@item \references@{@dots{}@}
@findex \references
Section of references to the literature; use @code{\url@{@}} for web
pointers. Optional as well as all the following sections.

@item \section@{@var{name}@}@{@var{text}@}
and maybe more @code{\section@{@}} environments.

@item \note@{@var{Some note you want to have pointed out.}@}
@findex \note

@item \author@{@dots{}@}
@findex \author
Who you are.  Use @code{\email@{@}} without extra delimiters (@samp{( )}
or @samp{< >}) or @code{\url@{@}}.

@item \seealso@{@dots{}@}
@findex \seealso
Pointers to related @R{} objects, using @code{\link@{@}}, usually as
@code{\code@{\link@{@}@}}.

@findex \examples
@findex \testonly
@findex \dontrun
@item \examples@{@dots{}@}
Examples of how to use the function.  These are set verbatim in
typewriter font.

@quotation
@strong{Note:} Use examples which are @emph{directly} executable!  Use
random number generators (e.g., @code{x <- rnorm(100)}), or a standard
data set loadable via @code{data(@dots{})} (see @code{data()} for info) to
define data!
@end quotation

By default, text inside @code{\examples@{@}} will be displayed in the
output of the help page and run by @kbd{make check}.  You can use
@code{\dontrun@{@}} for commands that should only be shown, but not run,
and @code{\testonly@{@}} for extra commands for testing @R{} that should
not be shown.

For example,
@example
x <- runif(10)       @r{Shown and run.}
\dontrun@{plot(x)@}    @r{Only shown.}
\testonly@{log(x@}     @r{Only run.}
@end example

@item \keyword@{@var{key_1}@}
@itemx \keyword@{@var{key_2}@}
@findex \keyword
Use at least one  keyword out of the list in @file{$RHOME/doc/KEYWORDS}.

@end table

@node Sectioning, Marking text, Documentation format, Writing R documentation
@section Sectioning

To begin a new paragraph or leave a blank in an example, just insert an
empty line (as in (La)@TeX{}).  To break a line, use @code{\cr}.

In addition to the predefined sections (such as @code{\description@{@}},
@code{\value@{@}}, etc.), you can ``define'' arbitrary ones by
@code{\section@{@var{section_title}@}@{@dots{}@}}.
@findex \section
E.g.,

@display
@code{\section@{Warning@}@{You must not call this function unless @dots{}@}}
@end display

@noindent Note that the additonal named sections are always inserted at
fixed positions in the output (before @code{\note}, @code{\seealso} and
the examples), no matter where they appear in the input.

@node Marking text, Mathematics, Sectioning, Writing R documentation
@section Marking text

The following logical markup commands are available for indicating
specific kinds of text.

@quotation
@multitable @columnfractions .20 .70
@item @code{\bold@{@var{word}@}}
@findex \bold
@tab set @var{word} in @strong{bold} font if possible
@item @code{\emph@{@var{word}@}}
@findex \emph
@tab emphasize @var{word} using @emph{italic} font if possible
@item @code{\code@{@var{word}@}}
@findex \code
@tab for pieces of code, using @code{typewriter} font if possible
@item @code{\file@{@var{word}@}}
@findex \file
@tab for file names
@item @code{\email@{@var{word}@}}
@findex \email
@tab for email addresses
@item @code{\url@{@var{word}@}}
@findex \url
@tab for URLs
@end multitable
@end quotation

@noindent The first two, @code{\bold} and @code{\emph}, should be used
in plain text for emphasis.

Fragments of @R{} code, including the names of @R{} objects, should be
marked using @code{\code}.  Only backslashes and percent signs need to be
escaped inside @code{\code}.

Finally, @code{\link@{@var{foo}@}} (usually in the combination
@code{\code@{\link@{@var{foo}@}@}}) produces a hyperlink to the help
page for object @var{foo}.  One main usage of @code{\link} is in the
@code{\seealso} section of the help page, @pxref{Documentation format},
above.  (This only affects the creation of hyperlinks, for example in
the @HTML{} pages used by @code{help.start()}.)

@node Mathematics, Miscellaneous, Marking text, Writing R documentation
@section Mathematics

Mathematical formula are something we want ``perfectly'' for printed
documentation (i.e., for the conversion to La@TeX{} and PostScript
subsequently) and still want something useful for ASCII and @HTML{}
online help.

@findex \eqn
@findex \deqn
To this end, the two commands @code{\eqn@{@var{latex}@}@{@var{ascii}@}}
and @code{\deqn@{@var{latex}@}@{@var{ascii}@}} are used.  Where
@code{\eqn} is used for ``inline'' formula (corresponding to
(La)@TeX{}'s @code{$@dots{}$}, @code{\deqn} gives ``displayed
equations'' (a la La@TeX{}'s @code{displaymath} environment, or @TeX{}'s
@code{$$@dots{}$$}).

Both commands can also be used as @code{\eqn@{@var{latexascii}@}} (only
@emph{one} argument) which then is used for both @var{latex} and
@var{ascii}.

The following example is from the @code{Poisson} help page:

@example
\deqn@{p(x) = @{\lambda^x\ \frac@{e^@{-\lambda@}@}@{x!@}@}
     @{p(x) = lambda^x exp(-lambda)/x!@}
for \eqn@{x = 0, 1, 2, ...@}.
@end example

@iftex
For the La@TeX{} manual, this becomes
@display
@tex
$$ p(x) = \lambda^x\ {e^{-\lambda} \over x!} $$
for $x = 0, 1, 2, \ldots$.
@end tex
@end display
@end iftex

For the @HTML{} and the ``direct'' (man-like) on-line help we get

@example
    p(x) = lambda^x exp(-lambda)/x!

for x = 0, 1, 2, ....
@end example

For historic reasons mostly, the @TeX{}/La@TeX{} commands @code{\alpha},
@code{\Alpha}, @code{\beta}, @code{\Gamma}, @code{\epsilon},
@code{\lambda}, @code{\mu}, @code{\pi}, @code{\sigma}, @code{\left(} and
@code{\right)} exist.  These can be used directly, without using the
@code{\eqn} diversion.
@findex \alpha
@findex \Alpha
@findex \beta
@findex \Gamma
@findex \epsilon
@findex \lambda
@findex \mu
@findex \pi
@findex \sigma
@findex \left(
@findex \right)

@node Miscellaneous, Platform-specific sections, Mathematics, Writing R documentation
@section Miscellaneous

@findex \R
Use @code{\R} for the @R{} system itself (you don't need extra
@samp{@{@}} or @samp{\}).  Use @code{\dots} for the dots in function
argument lists @samp{@dots{}}, and @code{\ldots} for ellipsis dots.

After a @samp{%}, you can put your own comments regarding the help
text. This will be completely disregarded, normally. Therefore, you can
also use it to make part of the ``help'' invisible.

@noindent @strong{Escaping Special Characters.}  You can produce a
backslash (@samp{\} by escaping it by another backslash.  (Note that
@code{\cr} is used for generating line breaks.)

The ``comment'' and ``control'' characters @samp{%} and @samp{\}
@emph{always} need to be escaped.  Inside the verbatim-like commands
(@code{\code} and @code{\examples}), no other characters are special.

In ``regular'' text (no verbatim, no @code{\eqn}, @dots{}), you
currently must escape all La@TeX{} special characters, i.e., besides
@samp{%}, @samp{@{}, and @samp{@}}, the four specials @samp{$},
@samp{&}, @samp{#}, and @samp{_} are simply produced by preceding with a
@samp{\}.  Further, @samp{^} by @code{\eqn@{\hat@{@}@}@{^@}}, and
@samp{~} by @code{\eqn@{\tilde@{@}@}@{~@}}.  Also, @samp{<}, @samp{>},
and @samp{|} must only be used in math mode, i.e., within @code{\eqn} or
@code{\deqn}.

@node  Platform-specific sections,  , Miscellaneous, Writing R documentation
@section Platform-specific documentation

Sometimes the documentation needs to differ by platform. Currently
three OS-specific options are available, @code{unix}, @code{windows} and
@code{mac}, and lines in the help source file can be enclosed in

@smallexample
#ifdef OS
   ...
#endif
@end smallexample
or
@smallexample
#ifndef OS
   ...
#endif
@end smallexample
for OS-specific inclusion or exclusion.

@node Function and variable index,  , Writing R documentation, Top
@unnumbered Function and variable index

@printindex vr

@bye

@c Local Variables: ***
@c mode: TeXinfo ***
@c End: ***
